\documentclass{article}
\usepackage{graphicx,fancyhdr,amsmath,amssymb,amsthm,subfig,url,hyperref}
\usepackage[margin=1in]{geometry}
\usepackage{enumerate}
%----------------------- Macros and Definitions --------------------------

%%% FILL THIS OUT
\newcommand{\studentname}{Leo Martel}
\newcommand{\suid}{lmartel}
\newcommand{\exerciseset}{Homework 1}
%%% END



\renewcommand{\theenumi}{\bf \Alph{enumi}}

%\theoremstyle{plain}
%\newtheorem{theorem}{Theorem}
%\newtheorem{lemma}[theorem]{Lemma}

\fancypagestyle{plain}{}
\pagestyle{fancy}
\fancyhf{}
\fancyhead[LO,RE]{\sffamily\bfseries\large CS 155}
\fancyfoot[LO,RE]{\sffamily\bfseries\large \studentname: \suid @stanford.edu}
\fancyfoot[RO,LE]{\sffamily\bfseries\thepage}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}

\graphicspath{{figures/}}

%-------------------------------- Title ----------------------------------

\title{CS155 \exerciseset}
\author{\studentname \qquad SUNet ID: \suid}

%--------------------------------- Text ----------------------------------

\begin{document}
\maketitle

\section*{Problem 1}
\begin{enumerate}[(a)]
\item A standard buffer overflow attack overwrites the return address stored in the stack frame during the execution of the function, so that upon return, execution resumes in another location (of the attacker's choosing). This would be detected by the ``backup'' system, because the overwritten value would not match the stored value, so the program would exit before running the attacker's code.

  To defeat this system, an attack would need to A) guess or find the random location L and B) successfully overwrite that location as well as the stack location. This is clearly a strictly harder problem.

\item Something like the code below, which calls a function pointer stored on the stack, is still vulnerable to a ``standard'' buffer overflow. An attacker can overflow `ours' and overwrite `fp' in `foo'. Since `fp' is not backed up and verified, the attacker can successfully redirect the function call.

\begin{verbatim}
int allgood(void){
  return 0;
}


int foo(char *src, int(*fp)(void)){
  char ours[1024];
  strcpy(src, ours);
  return fp();
}


int main(int argc, char *argv[]){
  return foo(argv[1], &allgood);
}

\end{verbatim}

\end{enumerate}

\section*{Problem 2}

\begin{tabular}{|c|}
                  \hline
  ret-addr      \\\hline
  SFP           \\\hline
  string buffer \\\hline
\end{tabular}

\section*{Problem 3}

Assumptions: attacker chooses size, can write to data after allocating

Attack: overflow memsize, allocate < (sizeof *hdr) bytes. Returning dat pointer allows attacker to overwrite heap metadata, leading to heap overflows like the ones exhibited in project 1.

\section*{Problem 4}

\begin{enumerate}[a.]
\item Sound: possible. Complete: impossible.
\item Sound!
\item Whether the loop terminates
\end{enumerate}


\section*{Problem 5}
\begin{enumerate}
\item If $d.idx$ had value above the threshold, the function would return after line 1. Therefore at line 2, an upper bound has been found for $d.idx$, so its value is $upper\_check$. It doesn't check for a lower bound, so it's not clean.
\item Since the abstract value of $d.idx$ is $upper\_check$ but not $clean$, we've never lower-bounded $d.idx$, introducing a vulnerability in line 2. This line should produce an ``array index possibly negative'' error, since negative array indices allow reading arbitrary memorybelow the array.
\item This analysis will produce a ``potential memcpy overflow'' error from the third parameter to memcpy. `skb' comes off the card tainted, so all its subfields are also tainted. Assuming no comparisons are run in the interim, the integer `len' field is tainted when we arrive at the memcpy line. Memcpy is a trusting sink, so the analysis throws this error upon using $len - 1$ as the memcpy size. If $len - 1 > sizeof(cmd.parm.setup.phone)$ then this code introduces a buffer overflow.
\end{enumerate}

\section*{Problem 6}

\begin{enumerate}[a.]
  \item all inherited
\end{enumerate}

\end{document}
